{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Seafile Admin Manual","text":"<p>This manual serves as an extension to the official Seafile Administration Manual. It introduces a new deployment approach tailored for ease and efficiency, particularly using Docker images and environment variable-based configuration.</p> <p>New deployment method from datamate</p> <p>Maintained by Datamate GmbH &amp; Co. KG, the primary support and sales partner of Seafile in Europe, this manual provides guidance on the simplified installation and configuration process that we have developed to enhance the deployment and management of Seafile.</p> <p>Only use this if you are aware of the differences regarding the official seafile deployment.</p> <p>Currently Beta</p> <p>This version is brand new and still a work in progress; it is not recommended for production use unless you are already familiar with Seafile.</p>"},{"location":"#why-a-new-deployment-approach","title":"Why a New Deployment Approach?","text":"<p>This new deployment approach focuses on simplifying the installation of Seafile using Docker images and managing the entire configuration through environment variables.</p> <p>The key advantages of this approach include:</p> <ul> <li>Quick and Easy Deployment: Deploy Seafile within minutes, reducing the time and effort traditionally required.</li> <li>Centralized Configuration Management: With all configurations handled in a single location, administration becomes more straightforward and less prone to error.</li> <li>Improved Documentation: Documenting changes is simplified, providing clear and concise records of configurations.</li> </ul> <p>We  Docker and Kubernetes</p> <p>This approach was primarily driven by the need to create a Kubernetes-compatible deployment, offering flexibility and scalability for modern cloud environments.</p>"},{"location":"#is-the-seafile-version-different","title":"Is the Seafile Version Different?","text":"<p>No, Seafile is still the same</p> <p>It\u2019s important to note that while this deployment utilizes custom Seafile Professional Docker images (available at Docker Hub) but the core Seafile software remains unchanged. The primary modification lies in the initialization scripts, which have been adapted to allow for configuration through environment variables.</p> <p>For those interested in the technical details of how these Seafile Professional images are built, check out our Dockerfile we use to build our containers available at our  Github repository datamate-rethink-it/seafile-release.</p> <p>Currently we support only Seafile Professional</p> <p>This new deployment supports only Seafile Professional. As a result, you will need a Seafile license, or you can use the free version, which is limited to a maximum of three users. Seafile Community might only be used for a Single Node installation via Docker. For a cluster setup you will always need a Seafile License.</p> <p>If you need a license, feel free to send us a request for a quote at seafile@datamate.org.</p> <p>Alright, let's get started with deploying Seafile, the world\u2019s fastest and most reliable self-hosted sync-and-share solution.</p>"},{"location":"administration/","title":"Administration","text":"<p>Will be added soon.</p>"},{"location":"configuration/available-variables/","title":"Available variables","text":""},{"location":"configuration/available-variables/#seafile","title":"Seafile","text":"<p>the main sync-and-share component ...</p> Variable Description Value <code>SEAFILE__quota__default</code> Global default quota for all users in Gigabyte. 2 <code>SEAFILE__quota__library_file_limit</code> Maximum number of files allowed in a library. If limit is reached, it is not possible to upload more files. \"\" <code>SEAFILE__history__keep_days</code> Days of history to keep. This is a default limit for all libraries. \"\" <code>SEAFILE__library_trash__expire_days</code> After how many days automatic cleanup of library trashes should happen. \"30\" <code>SEAFILE__memcached__memcached_options</code> Connection (pool) settings for memcached. \"--SERVER=localhost --POOL-MIN=10 --POOL-MAX=100\" <code>SEAFILE__redis__redis_host</code> Redis host in case you want to use redis instead of memcached (which is the default). \"127.0.0.1\" <code>SEAFILE__redis__redis_port</code> Redis port. \"6379\" <code>SEAFILE__redis__max_connections</code> Size of connection pool for Redis. \"100\" <code>SEAFILE__fileserver__host</code> Bind address of the fileserver. \"0.0.0.0\" <code>SEAFILE__fileserver__port</code> TCP port used by the fileserver. \"8082\" <code>SEAFILE__fileserver__worker_threads</code> Number of worker threads used by the fileserver. \"10\" <code>SEAFILE__fileserver__max_upload_size</code> Maximum upload file size in MB. There's no limit by default. \"\" <code>SEAFILE__fileserver__max_download_dir_size</code> Maximum download directory size in MB. The default is 100 MB. \"100\" <code>SEAFILE__fileserver__max_indexing_threads</code> Number of threads to use for indexing. \"1\" <code>SEAFILE__fileserver__fixed_block_size</code> Uploaded files are divided into fixed size blocks. This setting determines the block size. The default is 8 MB. \"8\" <code>SEAFILE__fileserver__web_token_expire_time</code> Expiration time (in seconds) of tokens used for uploading files via the web interface. \"3600\" <code>SEAFILE__fileserver__http_temp_file_ttl</code> After how much time a temp file will be removed. The unit is in seconds. Defaults to 3 days. \"259200\" <code>SEAFILE__fileserver__http_temp_scan_interval</code> File scan interval. The unit is in seconds. Defaults to 1 hour. \"3600\" <code>SEAFILE__fileserver__max_sync_file_count</code> Maximum number of files contained in a library that can be synced by the Seafile client. \"100000\" <code>SEAFILE__fileserver__fs_id_list_request_timeout</code> Timeout for fetching fs id list (in seconds). Defaults to 5 minutes. \"300\" <code>SEAFILE__fileserver__use_block_cache</code> Whether to enable block caching. \"false\" <code>SEAFILE__fileserver__block_cache_size_limit</code> Size limit of the cache (in MB). Defaults to 10GB. \"10000\" <code>SEAFILE__fileserver__block_cache_file_types</code> File types to be cached in block cache. \"mp4;mov\" <code>SEAFILE__fileserver__skip_block_hash</code> Use a random string as block ID instead of calculating the block ID based on the block contents. \"false\" <code>SEAFILE__fileserver__file_ext_white_list</code> Limit which file types can be uploaded (e.g. <code>\"md;mp4;mov\"</code>). \"\" <code>SEAFILE__fileserver__upload_limit</code> Upload limit in KB/s. \"\" <code>SEAFILE__fileserver__download_limit</code> Download limit in KB/s. \"\" <code>SEAFILE__fileserver__check_virus_on_web_upload</code> Automatically check uploaded files for viruses. \"false\" <code>SEAFILE__fileserver__enable_access_log</code> Whether to enable the fileserver access log. \"false\" <code>SEAFILE__fileserver__use_go_fileserver</code> Whether to enable the new Go fileserver. \"true\" <code>SEAFILE__fileserver__fs_cache_limit</code> Limit for the in-memory cache (in MB). Defaults to 2GB. \"2000\" <code>SEAFILE__fileserver__enable_profiling</code> Whether to enable profiling for the Go fileserver. \"false\" <code>SEAFILE__fileserver__profile_password</code> Password required to access the profiles. \"\" <code>SEAFILE__zip__windows_encoding</code> Encoding used for ZIP archives. \"\" <code>SEAFILE__database__type</code> Which database engine to use. \"mysql\" <code>SEAFILE__database__host</code> Database host. \"mariadb\" <code>SEAFILE__database__user</code> Database user. \"root\" <code>SEAFILE__database__password</code> Database password. \"\" <code>SEAFILE__database__db_name</code> Database name. \"seafile_db\" <code>SEAFILE__database__connection_charset</code> Which character set to use. \"utf8\" <code>SEAFILE__database__max_connections</code> Size of the connection pool. \"100\" <code>SEAFILE__database__use_ssl</code> Whether to use SSL to encrypt database connections. \"false\" <code>SEAFILE__database__skip_verify</code> Whether to skip SSL certificate verification. \"\" <code>SEAFILE__database__ca_path</code> Path to CA. \"\" <code>SEAFILE__file_lock__default_expire_hours</code> When to automatically expire file locks (in hours). Defaults to 12 hours. \"12\" <code>SEAFILE__file_lock__use_locked_file_cache</code> Enable cache for getting locked files. This reduces the server load. \"false\" <code>SEAFILE__cluster__enabled</code> Should be enabled if Seafile is deployed in a cluster. \"false\" <code>SEAFILE__slow_log__enable_slow_log</code> Whether to enable seaf-server's RPC slow log to do performance analysis. \"true\" <code>SEAFILE__slow_log__rpc_slow_threshold</code> RPC queries taking longer than this setting (in milliseconds) will be logged. Defaults to 5000 milliseconds. \"5000\" <code>SEAFILE__notification__enabled</code> Whether to enable the notification server. \"true\" <code>SEAFILE__notification__host</code> Host of the notification server. \"127.0.0.1\" <code>SEAFILE__notification__port</code> Port used by the notification server. \"8083\" <code>SEAFILE__notification__log_level</code> Log level of the notification server. \"info\" <code>SEAFILE__notification__jwt_private_key</code> Private key used to sign JWTs created by the notification server. \"\" <code>CCNET__Database__ENGINE</code> Database engine used by ccnet. \"mysql\" <code>CCNET__Database__HOST</code> Database host used by ccnet. \"mariadb\" <code>CCNET__Database__MAX_CONNECTIONS</code> Size of MySQL connection pool. 100 <code>CCNET__Database__USE_SSL</code> Whether to encrypt database connections. false <code>CCNET__Database__SKIP_VERIFY</code> Whether to skip SSL certificate verification. <code>CCNET__Database__CA_PATH</code> Path to CA. <code>CCNET__GROUP__TABLE_NAME</code> Alternative table name for \"Group\" table in case it conflicts with database keywords."},{"location":"configuration/available-variables/#seahub","title":"Seahub","text":"<p>The webinterface of seafile...</p> Variable Description Value <code>SEAHUB__CSRF_COOKIE_SECURE</code> Whether to use a secure cookie for the CSRF cookie. \"True\" <code>SEAHUB__CSRF_COOKIE_SAMESITE</code> The value of the SameSite flag on the CSRF cookie. \"Strict\" <code>SEAHUB__ENABLE_SIGNUP</code> Whether to allow users to register an account. \"False\" <code>SEAHUB__ACTIVATE_AFTER_REGISTRATION</code> Activate or deactivate user when registration is complete. If set to <code>False</code>, new users need to be activated by admin in the admin panel. \"False\" <code>SEAHUB__SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER</code> Whether to send an email when a system admin adds a new member. \"True\" <code>SEAHUB__SEND_EMAIL_ON_RESETTING_USER_PASSWD</code> Whether to send an email when a system admin resets a user's password. \"True\" <code>SEAHUB__NOTIFY_ADMIN_AFTER_REGISTRATION</code> Send system admin notify email when user registration is complete. \"True\" <code>SEAHUB__LOGIN_REMEMBER_DAYS</code> Remember days for login. \"7\" <code>SEAHUB__LOGIN_ATTEMPT_LIMIT</code> Attempt limit before showing a captcha when logging in. \"3\" <code>SEAHUB__FREEZE_USER_ON_LOGIN_FAILED</code> Deactivate user account when login attempts exceed the limit. \"False\" <code>SEAHUB__USER_PASSWORD_MIN_LENGTH</code> Minimum length for user's password. \"6\" <code>SEAHUB__USER_PASSWORD_STRENGTH_LEVEL</code> LEVEL based on four types of input: num, upper letter, lower letter, other symbols. '3' means password must have at least 3 types of the above. \"3\" <code>SEAHUB__USER_STRONG_PASSWORD_REQUIRED</code> When <code>True</code>, check password strength level; only STRONG (or above) is allowed. \"False\" <code>SEAHUB__FORCE_PASSWORD_CHANGE</code> Force user to change password when admin adds/resets a user. \"True\" <code>SEAHUB__SESSION_COOKIE_AGE</code> Age of cookie, in seconds (default: 2 weeks). \"1209600\" <code>SEAHUB__SESSION_EXPIRE_AT_BROWSER_CLOSE</code> Whether a user's session cookie expires when the Web browser is closed. \"False\" <code>SEAHUB__SESSION_SAVE_EVERY_REQUEST</code> Whether to save the session data on every request. \"False\" <code>SEAHUB__ENABLE_WIKI</code> Whether to enable the \"published library\" feature. \"True\" <code>SEAHUB__ENABLE_WEBDAV_SECRET</code> Enable the feature to allow users to specify a password for WebDAV login. \"True\" <code>SEAHUB__WEBDAV_SECRET_MIN_LENGTH</code> Minimum length for WebDAV secret. \"8\" <code>SEAHUB__WEBDAV_SECRET_STRENGTH_LEVEL</code> LEVEL for WebDAV secret, based on four types of input: num, upper letter, lower letter, other symbols. '1' means password must have at least 1 type of the above. \"1\" <code>SEAHUB__ENABLE_FORCE_2FA_TO_ALL_USERS</code> Force all users to log in with two-factor authentication. \"True\" <code>SEAHUB__ENABLE_REPO_SNAPSHOT_LABEL</code> Turn on this option to let users add a label to a library snapshot. \"False\" <code>SEAHUB__ENABLE_ENCRYPTED_LIBRARY</code> Enable creation of encrypted libraries. \"True\" <code>SEAHUB__ENCRYPTED_LIBRARY_VERSION</code> Version for encrypted library. Should only be <code>2</code> or <code>4</code>. Version 3 is insecure (using AES128 encryption) and is not recommended anymore. \"2\" <code>SEAHUB__REPO_PASSWORD_MIN_LENGTH</code> Minimum length for the password of an encrypted library. \"8\" <code>SEAHUB__SHARE_LINK_FORCE_USE_PASSWORD</code> Force use of a password when generating a share/upload link. \"False\" <code>SEAHUB__SHARE_LINK_PASSWORD_MIN_LENGTH</code> Minimum length for the password of a share link. \"8\" <code>SEAHUB__SHARE_LINK_PASSWORD_STRENGTH_LEVEL</code> Level for the password of a share/upload link, based on four types of input: num, upper letter, lower letter, other symbols. '3' means the password must have at least 3 types of the above. \"3\" <code>SEAHUB__SHARE_LINK_EXPIRE_DAYS_DEFAULT</code> Default expiration days for a share link. Once this value is configured, the user can no longer generate a share link with no expiration time. If not set, this value will be used. \"5\" <code>SEAHUB__SHARE_LINK_EXPIRE_DAYS_MIN</code> Minimum expiration days for a share link. \"3\" <code>SEAHUB__SHARE_LINK_EXPIRE_DAYS_MAX</code> Maximum expiration days for a share link. \"8\" <code>SEAHUB__UPLOAD_LINK_EXPIRE_DAYS_DEFAULT</code> Default expiration days for an upload link. Once this value is configured, the user can no longer generate an upload link with no expiration time. If not set, this value will be used. \"5\" <code>SEAHUB__UPLOAD_LINK_EXPIRE_DAYS_MIN</code> Minimum expiration days for an upload link. \"3\" <code>SEAHUB__UPLOAD_LINK_EXPIRE_DAYS_MAX</code> Maximum expiration days for an upload link. \"8\" <code>SEAHUB__SHARE_LINK_LOGIN_REQUIRED</code> Force user login when viewing a file/folder share link. \"True\" <code>SEAHUB__ENABLE_WATERMARK</code> Enable watermark when viewing (not editing) a file in a web browser. \"True\" <code>SEAHUB__DISABLE_SYNC_WITH_ANY_FOLDER</code> Disable sync with any folder. \"True\" <code>SEAHUB__ENABLE_REPO_HISTORY_SETTING</code> Enable or disable library history settings. \"True\" <code>SEAHUB__ENABLE_USER_CREATE_ORG_REPO</code> Enable or disable normal users from creating organization libraries. \"True\" <code>SEAHUB__ENABLE_SHARE_TO_ALL_GROUPS</code> Enable or disable user sharing of libraries with any group. \"True\" <code>SEAHUB__ENABLE_USER_CLEAN_TRASH</code> Enable or disable users to clean trash. \"True\" <code>SEAHUB__ENABLE_SHARE_LINK_REPORT_ABUSE</code> Add a report abuse button on download links. Users can report abuse on the share link page. \"True\" <code>SEAHUB__FILE_PREVIEW_MAX_SIZE</code> Online preview maximum file size, defaults to 30M. \"31457280\" <code>SEAHUB__TEXT_PREVIEW_EXT</code> Extensions of previewed text files. \"ac, am, bat, c, cc, cmake, cpp, cs, css, diff, el, h, html, htm, java, js, json, less, make, org, php, pl, properties, py, rb, scala, script, sh, sql, txt, text, tex, vi, vim, xhtml, xml, log, csv, groovy, rst, patch, go\" <code>SEAHUB__THUMBNAIL_IMAGE_SIZE_LIMIT</code> Seafile only generates thumbnails for images smaller than the following size. \"30\" <code>SEAHUB__ENABLE_VIDEO_THUMBNAIL</code> Enable or disable thumbnail for video. ffmpeg and moviepy should be installed first. \"False\" <code>SEAHUB__THUMBNAIL_VIDEO_FRAME_TIME</code> Use the frame at 5 second as thumbnail \"5\" <code>SEAHUB__THUMBNAIL_ROOT</code> Absolute filesystem path to the directory that will hold thumbnail files. \"\" <code>SEAHUB__THUMBNAIL_SIZE_FOR_ORIGINAL</code> Default size for picture preview. Enlarge this size can improve the preview quality. \"1024\" <code>SEAHUB__CLOUD_MODE</code> Enable cloud mode and hide <code>Organization</code> tab. \"\" <code>SEAHUB__ENABLE_GLOBAL_ADDRESSBOOK</code> Disable global address book \"\" <code>SEAHUB__ENABLE_ADFS_LOGIN</code> Enable authentication with ADFS \"False\" <code>SEAHUB__DISABLE_ADFS_USER_PWD_LOGIN</code> Force user login through ADFS instead of email and password \"False\" <code>SEAHUB__ENABLE_KRB5_LOGIN</code> Enable authentication with Kerberos \"False\" <code>SEAHUB__ENABLE_SHIBBOLETH_LOGIN</code> Enable authentication with Shibboleth \"False\" <code>SEAHUB__CLIENT_SSO_VIA_LOCAL_BROWSER</code> Enable client to open an external browser for single sign on. When it is false, the old built-in browser is opened for single sign on. When it is true, the default browser of the operating system is opened. The benefit of using system browser is that it can support hardware 2FA. \"False\" <code>SEAHUB__CLIENT_SSO_UUID_EXPIRATION</code> \"300\" <code>SEAHUB__SERVICE_URL</code> This is outside URL for Seahub(Seafile Web). The domain part (i.e., www.example.com) will be used in generating share links and download/upload file via web. \"\" <code>SEAHUB__ENABLE_SETTINGS_VIA_WEB</code> Disable settings via Web interface in system admin-&gt;settings \"True\" <code>SEAHUB__TIME_ZONE</code> Choices can be found here: http://en.wikipedia.org/wiki/List_of_tz_zones_by_name. If running in a Windows environment this must be set to the same as your system time zone. \"UTC\" <code>SEAHUB__LANGUAGE_CODE</code> Language code for this installation. All choices can be found here: http://www.i18nguy.com/unicode/language-identifiers.html. Default language for sending emails. \"en\" <code>SEAHUB__SITE_NAME</code> Set this to your website/company's name. This is contained in email notifications and welcome message when user login for the first time. \"Seafile\" <code>SEAHUB__SITE_TITLE</code> Browser tab's title \"Private Seafile\" <code>SEAHUB__SITE_ROOT</code> If you don't want to run seahub website on your site's root path, set this option to your preferred path. \"/\" <code>SEAHUB__MAX_NUMBER_OF_FILES_FOR_FILEUPLOAD</code> Max number of files when user upload file/folder \"500\" <code>SEAHUB__SHARE_LINK_EMAIL_LANGUAGE</code> Control the language that send email. Default to user's current language. \"\" <code>SEAHUB__UNREAD_NOTIFICATIONS_REQUEST_INTERVAL</code> Interval for browser requests unread notifications \"180\" <code>SEAHUB__ENABLE_DELETE_ACCOUNT</code> Whether to allow user to delete account, change login password or update basic user info on profile page. \"False\" <code>SEAHUB__ENABLE_UPDATE_USER_INFO</code> Whether to allow user to delete account, change login password or update basic user info on profile page. \"False\" <code>SEAHUB__ENABLE_CHANGE_PASSWORD</code> Enable a user to change password in 'settings' page. \"True\" <code>SEAHUB__ENABLE_GET_AUTH_TOKEN_BY_SESSION</code> Get web api auth token on profile page. \"True\" <code>SEAHUB__LOGOUT_REDIRECT_URL</code> Url redirected to after user logout Seafile. Usually configured as Single Logout url. \"\" <code>SEAHUB__ENABLE_TERMS_AND_CONDITIONS</code> Enable system admin add T&amp;C, all users need to accept terms before using. \"False\" <code>SEAHUB__ENABLE_TWO_FACTOR_AUTH</code> Enable two factor authentication for accounts. \"False\" <code>SEAHUB__ENABLE_SHOW_CONTACT_EMAIL_WHEN_SEARCH_USER</code> Whether to show contact emails when searching for users. \"True\" <code>SEAHUB__SHOW_TRAFFIC</code> Whether to show the used traffic in user's profile popup dialog. \"True\" <code>SEAHUB__ENABLE_SYS_ADMIN_VIEW_REPO</code> Allow administrator to view user's file in UNENCRYPTED libraries through Libraries page in System Admin. \"False\" <code>SEAHUB__ENABLE_SHARE_LINK_AUDIT</code> For unauthenticated users, providing an email before downloading or uploading on shared link page. \"True\" <code>ENABLE_UPLOAD_LINK_VIRUS_CHECK</code> Whether to check uploaded files that were uploaded using upload links for viruses. Defaults to \"False\". \"False\" <code>SEAHUB__EMAIL_USE_TLS</code> Whether to use TLS for the email server connection. \"False\" <code>SEAHUB__EMAIL_HOST</code> SMTP server host address. \"'smtp.example.com'\" <code>SEAHUB__EMAIL_HOST_USER</code> Username and domain for the SMTP server. \"'username@example.com'\" <code>SEAHUB__EMAIL_HOST_PASSWORD</code> Password for the SMTP server. \"'password'\" <code>SEAHUB__EMAIL_PORT</code> Port used for connecting to the SMTP server. \"25\" <code>SEAHUB__DEFAULT_FROM_EMAIL</code> Default from email address, typically set to the email host user. \"<code>SEAHUB__EMAIL_HOST_USER</code>\" <code>SEAHUB__SERVER_EMAIL</code> Email address used for server-originated emails, typically set to the email host user. \"<code>SEAHUB__EMAIL_HOST_USER</code>\" <code>SEAHUB__ENABLE_GUEST_INVITATION</code> Allow users to invite other uses by their email. \"False\""},{"location":"configuration/available-variables/#seafdav","title":"Seafdav","text":"<p>Settings for the WebDAV extension:</p> Variable Description Value <code>SEAFDAV__WEBDAV__enabled</code> Whether the WebDAV extension is enabled. \"false\" <code>SEAFDAV__WEBDAV__port</code> Port for WebDAV server. \"8080\" <code>SEAFDAV__WEBDAV__debug</code> Whether to enable debug mode. <code>SEAFDAV__WEBDAV__share_name</code> Name of the WebDAV share. \"/seafdav\" <code>SEAFDAV__WEBDAV__workers</code> How many worker processes to use. Maps to Gunicorn's \"workers\" setting. \"5\" <code>SEAFDAV__WEBDAV__timeout</code> Maps to Gunicorn's \"timeout\" setting. Set to \"1200\" by default to support large file uploads. \"1200\""},{"location":"configuration/available-variables/#seafevents","title":"Seafevents","text":"<p>Background tasks and ...</p> Variable Description Value <code>SEAFEVENTS__DATABASE__type</code> Deprecated. Only <code>mysql</code> is allowed. <code>sqlite</code> is no longer supported. \"mysql\" <code>SEAFEVENTS__DATABASE__host</code> IP or URL of the mysql server. \"mariadb\" <code>SEAFEVENTS__DATABASE__port</code> Port used for the sql connection. 3306 <code>SEAFEVENTS__DATABASE__username</code> Database username. \"root\" <code>SEAFEVENTS__DATABASE__password</code> Database password \"\" <code>SEAFEVENTS__DATABASE__name</code> Database name. \"seahub_db\" <code>SEAFEVENTS__STATISTICS__enabled</code> Enable statics tracking for seafile server. \"true\" <code>SEAFEVENTS__SEAHUB0x20EMAIL__enabled</code> Enable email notifications when there are new or unread notifications for the user. Requires a configured SMTP_SERVER. \"true\" <code>SEAFEVENTS__SEAHUB0x20EMAIL__interval</code> Define the interval of sending notification emails. Can be s(seconds), m(minutes), h(hours), d(days) \"30m\" <code>SEAFEVENTS__FILE0x20HISTORY__enabled</code> Enable file history tracking in the database for some specific file types for faster access \"true\" <code>SEAFEVENTS__FILE0x20HISTORY__threshold</code> Threshold time for merging historical versions in minutes. 5 <code>SEAFEVENTS__FILE0x20HISTORY__suffix</code> Define file types for file history feature as a comma-separated list. \"md,txt,ppt,pptx,doc,docx,xls,xlsx\" <code>SEAFEVENTS__AUDIT__enabled</code> Whether to enable audit log. \"false\" <code>SEAFEVENTS__INDEX0x20FILES__enabled</code> Whether to enable file indexing. \"true\" <code>SEAFEVENTS__INDEX0x20FILES__interval</code> The interval at which the search index is updated. Can be s(seconds), m(minutes), h(hours), d(days). \"10m\" <code>SEAFEVENTS__INDEX0x20FILES__highlight</code> Which highlighter to use. \"fvh\" <code>SEAFEVENTS__INDEX0x20FILES__index_office_pdf</code> Whether to index office/pdf files. \"false\" <code>SEAFEVENTS__INDEX0x20FILES__office_file_size_limit</code> The default size limit (in MB) for doc, docx, ppt, pptx, xls, xlsx and pdf files. Files larger than this will not be indexed. \"10\" <code>SEAFEVENTS__INDEX0x20FILES__username</code> Elasticsearch username. \"\" <code>SEAFEVENTS__INDEX0x20FILES__password</code> Elasticsearch password. \"\" <code>SEAFEVENTS__INDEX0x20FILES__scheme</code> Scheme to use when connecting to the elasticsearch instance. \"http\" <code>SEAFEVENTS__INDEX0x20FILES__cafile</code> Path to CA for elasticsearch authentication. \"\" <code>SEAFEVENTS__INDEX0x20FILES__repo_status_index_name</code> Index name for repository status. \"repo_head\" <code>SEAFEVENTS__INDEX0x20FILES__repo_files_index_name</code> Index name for repository files. \"repofiles\" <code>SEAFEVENTS__INDEX0x20FILES__loglevel</code> Log level. \"warning\" <code>SEAFEVENTS__EVENTS0x20PUBLISH__enabled</code> Whether to publish event messages. \"false\" <code>SEAFEVENTS__EVENTS0x20PUBLISH__mq_type</code> Which message queue to use. \"redis\" <code>SEAFEVENTS__REDIS__server</code> Redis server. \"\" <code>SEAFEVENTS__REDIS__port</code> Redis port. \"6379\" <code>SEAFEVENTS__REDIS__password</code> Redis password. \"\" <code>SEAFEVENTS__AUTO0x20DELETION__enabled</code> Whether users can use the file auto deletion feature. \"false\" <code>SEAFEVENTS__AUTO0x20DELETION__interval</code> Interval for auto deletion job (in seconds). Defaults to 1 day. \"86400\""},{"location":"configuration/concept/","title":"Configure your Seafile Server with environment variables","text":"<p>We already mentioned many times, that the main purpose of this new deployment approach - either with Docker or Kubernetes is an easy configuration with environment variables. In this chapter, you will get to know everything that you need to know about how this configuration approach works.</p>"},{"location":"configuration/concept/#configuration-files-are-recreated-on-every-container-start","title":"Configuration files are recreated on every container start","text":"<p>Every time the container starts, the environment variables are taken and used to recreate all configuration files that seafile requires. Because Seafile uses different types of configuration files, there is a slightly different logic how the environment variables have to be provided. In general it can be said that you have to provide it like this:</p> <pre><code>PREFIX__KEY=VALUE\n  or\nPREFIX__SECTION__KEY=VALUE\n</code></pre> <p>Let's go into the details:</p> .conf filesseahub_settings.pygunicorn.conf.pyseafile.nginx.conf <p>This is for valid for <code>ccnet.conf</code>, <code>seafdav.conf</code>, <code>seafevents.conf</code>, <code>seafile.conf</code>. Any setting can be passed with environment variables by following a certain naming convention:</p> <p><code>PREFIX__SECTION__KEY</code> (where <code>PREFIX</code> is either <code>CCNET</code>, <code>SEAFDAV</code>, <code>SEAFEVENTS</code> or <code>SEAFILE</code>)</p> <p>Notes</p> <ul> <li>The names of the environment variables are case-sensitive</li> <li>The configuration values are always strings (since the files are .ini files)</li> <li>Spaces in section names must be encoded using <code>0x20</code> (the hex representation of a space character)</li> </ul> <p>Example 1</p> <p>To change the MySQL connection pool size for ccnet, just add this to your .env file:</p> <pre><code>CCNET__Database__MAX_CONNECTIONS='200'\n</code></pre> <p>This generates the following section inside <code>ccnet.conf</code>:</p> <pre><code>[Database]\nMAX_CONNECTIONS = 200\n</code></pre> <p>Example 2</p> <p>To disable the file history for seafevents, just add this to your .env file:</p> <pre><code>SEAFEVENTS__FILE0x20HISTORY__enabled='false'\n</code></pre> <p>This generates the following section inside <code>seafevents.conf</code>:</p> <pre><code>[FILE HISTORY]\nenabled = false\n</code></pre> <p>You can customize the way <code>seahub_settings.py</code> is being generated by setting environment variables that start with <code>SEAHUB__</code>.</p> <p>Similar to <code>.conf</code> files, the script that generates the configuration files looks for environment variables that follow this pattern: <code>SEAHUB__SETTING_NAME</code></p> <p>Example 1</p> <p>To enable registration, just add this to your .env file:</p> <pre><code>SEAHUB__ENABLE_SIGNUP='true'\n</code></pre> <p>This generates the following setting inside <code>seahub_settings.py</code>:</p> <pre><code>ENABLE_SIGNUP = True\n</code></pre> <p>Example 2</p> <p>To set the minimum password length, just add this to your .env file:</p> <pre><code>SEAHUB__USER_PASSWORD_MIN_LENGTH='16'\n</code></pre> <p>This generates the following setting inside <code>seahub_settings.py</code>:</p> <pre><code>USER_PASSWORD_MIN_LENGTH = 16\n</code></pre> <p>The python type is automatically deduced by the variable's value. There's no need to add extra quotes around values.</p> <p>Special Cases</p> <p>A few settings are handled separately since they do not use simple key-value pairs:</p> <p>1. CACHE</p> <p>You can use the following environment variables to customize the caching backend used by <code>seahub</code>:</p> <ul> <li><code>SEAHUB__CACHE_BACKEND</code> (<code>memcached</code> or <code>redis</code>; default is <code>memcached</code>)</li> <li><code>SEAHUB__CACHE_HOST</code></li> <li><code>SEAHUB__CACHE_PORT</code></li> </ul> <p>There's no necessity to modify these values if you use the provided <code>seafile-pe.yml</code> file.</p> <p>2. DATABASE</p> <p>You can use the following environment variables to customize the database accessed by <code>seahub</code>:</p> <ul> <li><code>DB_HOST</code> (default is <code>mariadb</code>)</li> <li><code>DB_ROOT_PASSWD</code></li> </ul> <p>3. SAML Attribute Mapping</p> <p>Seafile requires you to specify the attribute mapping when using SAML. You can use environment variables prefixed with <code>SEAHUB__SAML_ATTRIBUTE_MAPPING__</code> in order to do this.</p> <p>Example:</p> <pre><code>SEAHUB__SAML_ATTRIBUTE_MAPPING__name=display_name\nSEAHUB__SAML_ATTRIBUTE_MAPPING__mail=contact_email\n</code></pre> <p>This would generate the following configuration block inside <code>seahub_settings.py</code>:</p> <pre><code>SAML_ATTRIBUTE_MAPPING = {\n    'name': ('display_name', ),\n    'mail': ('contact_email', ),\n}\n</code></pre> <p>Usually there is no need to make any changes to this file. Therefore it is currently not possible to customize this file. The file is overwritten on each restart.</p> <p>It is currently not possible to customize this file. The file is overwritten on each restart.</p> <p>NGINX listens on port 80. There should always be a reverse proxy in front of it that also handles TLS termination (e.g. Caddy).</p> <p>Just add a key value pair to the <code>.env</code> and run <code>docker compose up -d</code>. This will restart your Seafile Server and the new value is written to the configuration files of seafile.</p> <p>If you have an idea which variable you would like to define, just have a look at the complete list of all variables.</p>"},{"location":"configuration/authentication/overview/","title":"authentication overview","text":"<p>Will be updated soon...</p>"},{"location":"configuration/examples/mail/","title":"Email configuration","text":"<p>Here are the necessary environment variables to configure your mail sending with your <code>.env</code>. After a restart of the container, these new settings will be activated.</p> <pre><code>SEAHUB__EMAIL_USE_TLS='False'\nSEAHUB__EMAIL_HOST='smtp.example.com'\nSEAHUB__EMAIL_HOST_USER='username@example.com'\nSEAHUB__EMAIL_HOST_PASSWORD='topsecret'\nSEAHUB__EMAIL_PORT='5'\nSEAHUB__DEFAULT_FROM_EMAIL='noreply@example.com'\nSEAHUB__SERVER_EMAIL='noreply@example.com'\n</code></pre>"},{"location":"customization/custom-css/","title":"Custom CSS","text":""},{"location":"customization/custom-css/#custom-styles","title":"Custom Styles","text":"<p>To use custom styles, create a css file in your seafile-compose directory and mount it into the container. Also add these two variables.</p> <pre><code>services:\n  seafile:\n    # ...\n    environment:\n      # ...\n      - SEAHUB__ENABLE_BRANDING_CSS=True\n      - SEAHUB__BRANDING_CSS=custom/custom.css\n    volumes:\n      - ./your-custom-styles.css:/shared/seafile/seahub-data/custom/custom.css:ro\n</code></pre>"},{"location":"customization/logo/","title":"Custom Images","text":"<p>You can use the following volume mounts inside your custom <code>.yml</code> file to modify the site logo, login background image and favicon:</p> <pre><code>services:\n  seafile:\n    # ...\n    volumes:\n      - ./your-custom-logo.png:/shared/seafile/seahub-data/custom/mylogo.png:ro\n      - ./your-custom-favicon.ico:/shared/seafile/seahub-data/custom/favicon.ico:ro\n      - ./your-custom-login-bg.jpg:/shared/seafile/seahub-data/custom/login-bg.jpg:ro\n</code></pre> <p>Notes:</p> <ul> <li>The container paths should not be modified since seahub is configured to access these paths</li> <li>You must configure these volume mounts on all frontend nodes</li> <li>Seahub needs to be restarted</li> </ul>"},{"location":"customization/main-color/","title":"Change the main color","text":"<p>Seafile has an orange main color. If this color does not match your custom logo, it might be useful to replace this main color with another color of your choice.</p> <p>To do this we force Seafile to use custom css code to overwrite the main color.</p> <p>The first step is you use the following color picker and select a new main color of your choice.</p> <p>Dark colors are better than bright ones</p> <p>You should select a color that is dark enough to be a good background for white font color. To switch also the font color from white to black is not yet part of this manual.</p> Version 11.xVersion 10.x <p>Select a color and you will get the correspondent css code in the following grey box.</p> <p> <pre><code>Select a color and the css code will be created...\n</code></pre> </p> <p>Use the copy-and-paste icon () on the top right of the grey box to copy the complete css code to your clipboard.</p> <p>Select a color and you will get the correspondent css code in the following grey box.</p> <p> <pre><code>Select a color and the css code will be created...\n</code></pre> </p> <p>Use the copy-and-paste icon () on the top right of the grey box to copy the complete css code to your clipboard.</p>"},{"location":"customization/main-color/#configuration-via-environment-file","title":"Configuration via environment file","text":"<p>Save the css-code to your <code>/opt/seafile-compose/</code> folder and follow this guide to activate custom css. Don't forget to restart your container.</p>"},{"location":"customization/main-color/#configuration-via-the-web-interface","title":"Configuration via the web interface","text":"<p>Login to your SeaTable Server as system administrator and switch to the system admin area. Select the navigation point <code>Settings</code>. Team admins or normal users does not have the permission to access the system admin area.</p> <p>First you should set the checkbox for <code>ENABLE_BRANDING_CSS</code>. Then simply copy and paste () the css code and paste it to the input box of <code>Custom CSS</code>. Submit by clicking on the green .</p> <p>Reload your page of your browser and the color should be changed.</p>"},{"location":"customization/overview/","title":"UI Customiziation in Seafile","text":"<p>Seafile offers numerous options for tailoring the system to your specific needs. This includes customization of colors, logos, images, emails and HTML templates. While most customization tasks can be performed via the command line interface, system administrators also have the ability to make certain changes directly through the web interface (if activated).</p> <p>In general, we recommend to make all changes via environment variables, to have all configurations at one place.</p> <p>If you don't see Settings in the system admin area, you might need to set <code>SEAHUB__ENABLE_SETTINGS_VIA_WEB=true</code> in your <code>/opt/seafile-compose/.env</code> file.</p>"},{"location":"customization/overview/#every-change-requires-a-restart","title":"Every change requires a restart","text":"<p>Keep in mind, that every change that you do, requires a restart of the seafile/seahub service or the Seafile container.</p> <pre><code>cd /opt/seafile-compose\ndocker compose down\ndocker compose up -d\n</code></pre>"},{"location":"customization/site-title/","title":"Site Title and Site Name","text":"<p>Site Title and Site Name are two basic customization options. The Title is used in the browser tab and the Name is used in notifications or email messages.</p>"},{"location":"customization/site-title/#configuration-via-environment-variables","title":"Configuration via environment variables","text":"<p>Add these configurations to your <code>/opt/seafile-compose/.env</code> file and restart the seafle container.</p> <pre><code>SEAHUB__SITE_TITLE=\"My private seafile cloud\"\nSEAHUB__SITE_NAME=\"My private seafile cloud\"\n</code></pre>"},{"location":"docker/cluster/","title":"Installing a Seafile Cluster with Docker","text":"<p>A Seafile cluster is typically composed of three servers, each fulfilling specific roles to ensure efficient operation. The cluster setup includes a backend server dedicated to non-time-critical tasks such as file indexing, antivirus scanning, and email notifications. This server also runs essential services like Memcached and Elasticsearch.</p> <p>In addition to the backend server, the cluster requires two or more frontend servers to handle user requests.</p> <p>Seafile relies on a SQL database, so we deploy a Galera cluster in active-active mode across all servers. For data storage, we recommend using S3 storage, which we assume to be external. We also assume that you have a load balancer available.</p>"},{"location":"docker/cluster/#cluster-components","title":"Cluster Components","text":"Backend ServerFrontend Servers <p>The backend server runs the following Docker containers:</p> <ul> <li>Seafile</li> <li>MariaDB (Galera)</li> <li>Memcached</li> <li>Elasticsearch</li> </ul> <p>Hardware Recommendations: At least 4 CPUs and 8 GB of RAM.</p> <p>Each frontend server runs:</p> <ul> <li>Seafile</li> <li>MariaDB (Galera)</li> </ul> <p>Hardware Recommendations: At least 2 CPUs and 4 GB of RAM.</p> <p>This setup is well-suited for handling up to several hundred users. If your frontend servers experience resource limitations, consider adding additional frontend servers. If the backend server becomes resource-constrained, you can improve performance by adding more CPU and RAM.</p> <p>Cluster does not automatically mean high-availability</p> <p>While this setup enhances resilience, it does not ensure full high availability. Frontend nodes can fail without affecting the overall operation, but if the backend server fails, some background tasks, such as file indexing and notifications, may be temporarily unavailable. Despite this, Seafile will continue to function in most cases.</p> <p>Seafile currently supports one single backend server.</p> <p>Furthermore, it is assumed that the three servers are located on an internal network and can communicate with each other.</p>"},{"location":"docker/cluster/#visualization-of-the-seafile-cluster","title":"Visualization of the Seafile Cluster","text":""},{"location":"docker/cluster/#general-installation-steps","title":"General Installation Steps","text":"<p>The installation process for all three servers follows similar steps:</p> <ul> <li>Install Docker runtime.</li> <li>Download the yml and .env files.</li> <li>Make the necessary modifications to the .env file.</li> <li>Start the docker containers.</li> </ul> <p>Sounds easy? It is easy. So let's get started.</p>"},{"location":"docker/cluster/#install-basic-tools","title":"Install basic tools","text":"<p>The following command installs basic tools that are used in the following manual. Usually all these tools are already installed on your linux server. Execute the following commands on all three servers:</p> <pre><code>apt update &amp;&amp; \\\napt -y install curl pwgen tree wget tar nano\n</code></pre>"},{"location":"docker/cluster/#install-docker-and-docker-compose-plugin","title":"Install Docker and Docker Compose Plugin","text":"<p>At get.docker.com, you'll find a script designed for the easy and convenient installation of the Docker Engine. While the script isn't recommended for production environments, it has shown no issues in our observations. You can effortlessly install Docker using this single command on all three servers:</p> <pre><code>curl -fsSL get.docker.com | bash\n</code></pre> <p>Alternatively, you can opt to follow Docker's official installation instructions</p>"},{"location":"docker/cluster/#install-seafile-server","title":"Install Seafile Server","text":"<p>This installation assumes that all Seafile components are installed under <code>/opt</code>. We highly recommended to keep this folder structure. All articles in the manual assume Seafile's installation in this directory.</p>"},{"location":"docker/cluster/#1-create-basic-structure","title":"1. Create basic structure","text":"<p>Simply copy and paste the following command into your command line on all three servers to execute. This code will download the latest yml files from repository  seafile-release.</p> <pre><code>mkdir /opt/seafile-compose &amp;&amp; \\\ncd /opt/seafile-compose &amp;&amp; \\\nwget -c https://github.com/datamate-rethink-it/seafile-release/releases/latest/download/seafile-compose.tar.gz \\\n-O - | tar -xz -C /opt/seafile-compose &amp;&amp; \\\ncp -n .env-release .env\n</code></pre>"},{"location":"docker/cluster/#2-create-some-directories","title":"2. Create some directories","text":"<p>Elastisearch does not run as root user and therefore it is necessary to create the directory for the volume mount upfront. Otherwise elasticsearch has no permission to write into this directory. Also Galera requires a directory with the right permissions.</p> Backend ServerFrontend Servers <pre><code>mkdir -p /opt/seafile-elasticsearch/data &amp;&amp; \\\nchown -R 1000 /opt/seafile-elasticsearch\n\nmkdir -p /opt/seafile-galera/mariadb &amp;&amp; \\\nchown 1001 /opt/seafile-galera/mariadb\n</code></pre> <pre><code>mkdir -p /opt/seafile-galera/mariadb &amp;&amp; \\\nchown 1001 /opt/seafile-galera/mariadb\n</code></pre>"},{"location":"docker/cluster/#3-generate-some-secrets","title":"3. Generate some secrets","text":"<p>Seafile is configured with the hidden <code>.env</code> file (=enviroment configuration file) that is stored in the folder <code>/opt/seafile-compose</code>.</p> <p>We utilize <code>pwgen</code> to create secure passwords for your admin account, the database root password and other stuff. The following commands will generate such passwords and include them in the <code>.env'</code> file.</p> <pre><code># Generate these passwords only once!\n# You must use the same passwords on the other servers.\nsed -i \"s/^SEAFILE_ADMIN_PASSWORD=.*/SEAFILE_ADMIN_PASSWORD=$(pwgen 40 1)/\" .env\nsed -i \"s/^SEAFILE_MYSQL_ROOT_PASSWORD=.*/SEAFILE_MYSQL_ROOT_PASSWORD=$(pwgen 40 1)/\" .env\nsed -i \"s/^SEAHUB__SECRET_KEY=.*/SEAHUB__SECRET_KEY=$(pwgen 40 1)/\" .env\nsed -i \"s/^SEAFILE__notification__jwt_private_key=.*/SEAFILE__notification__jwt_private_key=$(pwgen 40 1)/\" .env\n</code></pre> <p>Consistent Secrets Across All Servers</p> <p>Do not generate new secrets for each server. Seafile requires the same secrets to be used on all servers.</p>"},{"location":"docker/cluster/#4-complete-settings-in-the-env-file","title":"4. Complete settings in the .env file","text":"<p>Open the <code>.env</code> file with the editor of your choice, like <code>nano</code> or <code>vim</code> and complete the configuration.</p> <pre><code>nano /opt/seafile-compose/.env\n</code></pre> <p>Continue setting up your Seafile server by setting all required variables.</p> <pre><code># components to be used\nCOMPOSE_FILE='caddy.yml,seafile-pe.yml' # (1)!\nCOMPOSE_PATH_SEPARATOR=','\n\n# system settings\nTIME_ZONE='Europe/Berlin' # (2)!\n\n# seafile server base url\nSEAFILE_SERVER_HOSTNAME='seafile.example.com' # (3)!\n\n# initial web admin\nSEAFILE_ADMIN_EMAIL='me@example.com'\nSEAFILE_ADMIN_PASSWORD='topsecret'\n\n# database\nSEAFILE_MYSQL_ROOT_PASSWORD='topsecret'\n\n# seahub secret key\nSEAHUB__SECRET_KEY='topsecret'\n\n# jwt private key for seafile notification server\nSEAFILE__notification__jwt_private_key='topsecret'\n\n#####\n## cluster setup\n#####\n\n# IP addresses of the three servers in the internal network\nNODE_PRIVATE_IP=10.0.0.2 # (10)!\nELASTICSEARCH_HOST=10.0.0.2 # (4)!\nMEMCACHED_HOST=10.0.0.2 # (5)!\nSEAFILE_CLUSTER_0_IP=10.0.0.2 # (6)!\nSEAFILE_CLUSTER_1_IP=10.0.0.3 # (7)!\nSEAFILE_CLUSTER_2_IP=10.0.0.4 # (8)!\n\n# replace 0 with 1 or 2 on the frontend-nodes\nNODE_PRIVATE_HOSTNAME='seafile-cluster-0'\n\n## Galera Cluster (Backend config)\nMARIADB_GALERA_CLUSTER_BOOTSTRAP='yes' # (9)!\nMARIADB_GALERA_CLUSTER_NAME='seafile-galera-cluster'\nMARIADB_GALERA_MARIABACKUP_USER='maria_backup_user'\nMARIADB_GALERA_MARIABACKUP_PASSWORD='topsecret'\nMARIADB_ROOT_PASSWORD='topsecret'\nMARIADB_REPLICATION_PASSWORD='topsecret'\nMARIADB_REPLICATION_USER='maria_replication_user'\nMARIADB_ENABLE_TLS='no'\n\n# cluster definition node name\nSEAFILE_CLUSTER_0_NAME='seafile-cluster-0'\nSEAFILE_CLUSTER_1_NAME='seafile-cluster-1'\nSEAFILE_CLUSTER_2_NAME='seafile-cluster-2'\n</code></pre> <ol> <li>COMPOSE_FILE is a comma separated list without spaces. This list defines which components should run on this server. Leave <code>caddy.yml</code> and <code>seatable-server.yml</code> at the beginning. You will add more components at a later time.</li> <li>Get a list of timezones from Wikipedia.</li> <li>Select your domain or subdomain that points to your Server (without https://). You have to set an A-Record or CNAME pointing to your IP.     If you don't have an URL and want to use an IP, then use the free service nip.io and add your-ip.nip.io (e.g. 5.35.28.112.nip.io).</li> <li>Add the private IP address of your elasticsearch host (=the backend server ip)</li> <li>Add the private IP address of your memcached host (=the backend server ip)</li> <li>Add the private IP address of seafile-backend</li> <li>Add the private IP address of your first frontend server</li> <li>Add the private IP address of your second frontend server</li> <li>This value has to be \"yes\" on the backend server and \"no\" on the frontend servers.</li> <li>Add the private IP address of this server.</li> </ol>"},{"location":"docker/cluster/#5-get-a-license","title":"5. Get a license","text":"<p>We assume that you have a license and that you save it to <code>/opt/seafile-compose/seafile-license.txt</code>.</p> <p>If you don't have a license, just create an empty license file to with the following command to use seafile with up to three users for free.</p> <pre><code>touch /opt/seafile-compose/seafile-license.txt\n</code></pre> <p>Do you need more users for your Seafile Enterprise?</p> <p>If you enjoy Seafile and are contemplating a larger license, please get in touch with us.</p>"},{"location":"docker/cluster/#6-start-the-backend-server","title":"6. Start the backend server","text":"<p>Now it is time to run the following command to download and initiate the docker images for the initial setup on the backend server. This process will require some time.</p> <p>We start with the backend server to initialize the database cluster.</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"docker/cluster/#7-start-the-frontend-servers","title":"7. Start the frontend servers","text":"<p>Now it is time to start also the frontend nodes.</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"docker/cluster/#8-load-balancer","title":"8. Load Balancer","text":"<p>Now the frontend nodes should provide their services on port 80. Target the load balancer to these servers and you should be read to go...</p> <p>If the process completed successfully, you can now open your web browser and access Seafile using the URL you specified in your <code>.env</code> file. Sign in using the credentials you provided in the same file.</p> <p> Congratulations! You've completed the basic setup of your Seafile Server.</p>"},{"location":"docker/cluster/#9-next-steps","title":"9. Next steps","text":"<p>For sure you will do some more configurations or install additional components. Jump to the next chapters to get more information.</p>"},{"location":"docker/concept/","title":"Core Concept of the Seafile Deployment with Docker","text":"<p>A Seafile Server consists of multiple containers. Therefore let's talk about how you typically install such a system.</p>"},{"location":"docker/concept/#multi-container-installations-can-be-intricate","title":"Multi-container installations can be intricate","text":"<p>Usually, software relying on multiple containers involves a large and complex <code>docker-compose.yml</code> file. This complexity intensifies with optional containers, leading to bloated files or the need to manually manage additional services. This is quite a challenging task.</p> <p>In addition, consistently maintaining correct indentation and syntax alignment in the YAML file demands caution. In summary, this process can be cumbersome, prone to errors, and challenging\u2014particularly for beginners or users unfamiliar with docker-compose files.</p> <p>Also Seafile requires typically that you start the docker container and then edit the configuration files after the first start. This is no longer up to date.</p>"},{"location":"docker/concept/#we-want-to-keep-it-simple","title":"We want to keep it simple ...","text":"<p>Instead of handling one extensive docker-compose.yml file and configure Seafile after the initial start, we present a more structured approach:</p> <ul> <li>We provide a set of individual yml files and one .env file.</li> <li>Each yml file defines commands for installing a specific component, such as the Seafile Server, web proxy (caddy), or an Office Editor.</li> <li>An accompanying .env file manages environment variables to configure your setup.</li> </ul>"},{"location":"docker/concept/#layered-structure","title":"Layered structure","text":"<p>Think of the .env file as a recipe for your setup and the yml files are like ingredients.</p> <p>Create copy for custom changes of the yml-files</p> <p>Generally, there's no need to modify the yml-files. We provide updated yml-files with each new Seafile version that overwrite your existing yml-files. However, if you wish to make alterations, create a copy and name it something like <code>custom-...yml</code>.</p> <p>You can configure components in the <code>.env</code> file, determining which ones to install. Start with essential components like Seafile Server and Caddy web proxy.</p> <p>Example in the .env file:</p> <pre><code>COMPOSE_FILE='caddy.yml,seafile-pe.yml'\n</code></pre> <p>By adding or removing yml-files from this list, you control the composition during runtime, eliminating the need for a single, extensive docker-compose.yml file.</p> <p>With this understanding, the subsequent installation descriptions should be straightforward to follow.</p> <p>Primarily, use copy and paste</p> <p>Throughout the installation process, we strive to eliminate the need for manual file editing. Most commands can be executed by simply copying and pasting. Look for the copy-and-paste icon () at the end of each code box, which conveniently copies the content to your clipboard. This helps prevent typing errors and ensures a smoother installation experience.</p>"},{"location":"docker/how-to-configure-docker/","title":"How to configure your Seafile Server","text":"<p>Seafile requires multiple configuration files. In the past these configuration files were generated on your first startup and then you had to update these configuration files and restart the seafile and seahub service inside the container. This approach was uncomfortable and has completely changed. From now one you should only use enviroment variables.</p>"},{"location":"docker/how-to-configure-docker/#configuration-with-environment-variables","title":"Configuration with environment variables","text":"<p>Using this new deployment approach, you will only configure Seafile with enviroment variables. Any settings that you would normally configure in one of the configuration files can instead be made through environment variables.</p> <p>The logic slighly varies for the different configuration files and will be described in all details in the Configuration Chapter.</p> <p>For now it is sufficient to understand, that you only have to add configurations in your .env file. All configuration will be passed automatically to the seafile container and then translated into configuration files.</p>"},{"location":"docker/how-to-configure-docker/#change-of-configuration-files-still-work","title":"Change of configuration files still work?","text":"<p>You can still change the content of your configuration files and restart the services inside the container, but after the next restart of the container, these changes will be overwritten.</p> <p>This is a breaking change to the past</p> <p>If you are familiar with the configuration of a Seafile Server, you know that this is breaking change. Forget about updating your configuration files directly. On every restart of the container, the configuration files arerecreated by the the container's entrypoint script and will overwrite all your settings.</p>"},{"location":"docker/how-to-configure-docker/#update-the-yml-files","title":"Update the yml files","text":"<p>Generally, there's no need to make changes to the different yml-files in most cases. Also your yml-files will be overriden with the next update.</p> <p>If you really need to make changes to your yml-files, you should create a copy and rename the file. Adjustments should be made only by experienced Docker administrators.</p> <pre><code># Example to create a custom copy:\ncp seafile-pe.yml custom-seafile-pe.yml\n</code></pre> <p>To use your custom yml-file you have to update the value <code>COMPOSE_FILE</code> in your .env</p>"},{"location":"docker/how-to-configure-docker/#lets-configure-your-seafile-server","title":"Let's Configure your Seafile Server","text":"<p>Now that you know how to configure your Seafile Server, jump to the Configuration Section to get a list of all available enviroment variables.</p>"},{"location":"docker/migrate-from-docker-deployment/","title":"Migrate From Docker Deployment Approach","text":"<p>If you want to migrate an existing Seafile installation that was installed using Docker (using this installation guide), you should follow these steps:</p>"},{"location":"docker/migrate-from-docker-deployment/#1-check-your-seafile-version","title":"1. Check Your Seafile Version","text":"<p>Make sure that you're running the latest version of Seafile.</p> <p>If this is not the case, please follow the relevant upgrade guide(s) before proceeding.</p>"},{"location":"docker/migrate-from-docker-deployment/#2-backup-files-database","title":"2. Backup: Files &amp; Database","text":"<p>Create a backup of your files and your database. Please refer to the docs for instructions.</p>"},{"location":"docker/migrate-from-docker-deployment/#3-backup-configuration-files","title":"3. Backup: Configuration Files","text":"<p>Create a backup of your configuration files (<code>/opt/seafile-data/seafile/conf</code>).</p>"},{"location":"docker/migrate-from-docker-deployment/#4-stop-containers","title":"4. Stop Containers","text":"<p>Run the following commands to stop Seafile and the supporting containers:</p> <pre><code>cd /opt/seafile\ndocker compose down\n</code></pre>"},{"location":"docker/migrate-from-docker-deployment/#5-deploy-seafile","title":"5. Deploy Seafile","text":"<p>Follow the installation instructions to deploy Seafile using our new Docker-based deployment.</p> <p>The two Seafile installations should not clash since our new approach uses the paths <code>/opt/seafile-compose</code> and <code>/opt/seafile-server</code> by default.</p>"},{"location":"docker/migrate-from-docker-deployment/#6-check-connectivity","title":"6. Check Connectivity","text":"<p>Make sure that you can reach Seahub from your browser.</p> <p>All the services should be healthy. You can check this by running <code>docker compose ps</code> in <code>/opt/seafile-compose</code>.</p>"},{"location":"docker/migrate-from-docker-deployment/#7-migrate-configuration-files","title":"7. Migrate Configuration Files","text":"<p>Our new deployment approach only supports configuration based on environment variables. The \"old\" configuration files still exist, but they are essentially immutable and overwritten every time the container starts.</p> <p>In order to migrate your existing configuration files, you should carefully examine the configuration files from your old installation and migrate all relevant settings to <code>/opt/seafile-compose/.env</code>. Please refer to the configuration docs for more information on how to do this.</p> <p>Do not forget to restart Seafile using <code>docker compose up -d</code> once you're done.</p>"},{"location":"docker/migrate-from-docker-deployment/#8-restore-files","title":"8. Restore Files","text":"<p>Use <code>cp</code> to copy your <code>storage</code> directory (previously at <code>/opt/seafile-data/seafile/seafile-data/storage</code>) to <code>/opt/seafile-server/seafile/seafile-data/storage</code>:</p> <pre><code>cp -R /opt/seafile-data/seafile/seafile-data/storage /opt/seafile-server/seafile/seafile-data/\n</code></pre>"},{"location":"docker/migrate-from-docker-deployment/#9-restore-databases","title":"9. Restore Databases","text":"<p>Run the following commands to restore your databases:</p> <pre><code>cd /opt/seafile-compose\ndocker exec -i mariadb sh -c 'exec mariadb -uroot -p\"$MYSQL_ROOT_PASSWORD\" ccnet_db' &lt; ccnet_db.sql\ndocker exec -i mariadb sh -c 'exec mariadb -uroot -p\"$MYSQL_ROOT_PASSWORD\" seafile_db' &lt; seafile_db.sql\ndocker exec -i mariadb sh -c 'exec mariadb -uroot -p\"$MYSQL_ROOT_PASSWORD\" seahub_db' &lt; seahub_db.sql\n</code></pre> <p>Warning: This will drop all existing tables in the new installation!</p>"},{"location":"docker/migrate-from-docker-deployment/#10-restart-seafile","title":"10. Restart Seafile","text":"<p>Run the following commands to restart Seafile:</p> <pre><code>cd /opt/seafile-compose\ndocker compose down\ndocker compose up -d\n</code></pre>"},{"location":"docker/migrate-from-package-installation/","title":"Migrate From Package Installation Deployment Approach","text":"<p>If you want to migrate an existing Seafile installation that was installed without Docker (using this installation method), you should follow these steps:</p>"},{"location":"docker/migrate-from-package-installation/#1-check-your-seafile-version","title":"1. Check Your Seafile Version","text":"<p>Make sure that you're running the latest version of Seafile.</p> <p>If this is not the case, please follow the relevant upgrade guide(s) before proceeding.</p>"},{"location":"docker/migrate-from-package-installation/#2-backup-files-database","title":"2. Backup: Files &amp; Database","text":"<p>Create a backup of your files and your database. Please refer to the docs for instructions.</p>"},{"location":"docker/migrate-from-package-installation/#3-backup-configuration-files","title":"3. Backup: Configuration Files","text":"<p>Create a backup of your configuration files (<code>/opt/seafile/conf</code>).</p>"},{"location":"docker/migrate-from-package-installation/#4-stop-existing-services","title":"4. Stop Existing Services","text":"<p>Stop the existing services using the following commands: <pre><code>/opt/seafile/seafile-server-latest/seahub.sh stop\n/opt/seafile/seafile-server-latest/seafile.sh stop\nsudo systemctl stop nginx\nsudo systemctl disable nginx\nsudo systemctl stop memcached\nsudo systemctl disable memcached\n</code></pre></p>"},{"location":"docker/migrate-from-package-installation/#5-deploy-seafile","title":"5. Deploy Seafile","text":"<p>Follow the installation instructions to deploy Seafile using our new Docker-based deployment.</p> <p>The two Seafile installations should not clash since our new approach uses the paths <code>/opt/seafile-compose</code> and <code>/opt/seafile-server</code> by default.</p>"},{"location":"docker/migrate-from-package-installation/#6-check-connectivity","title":"6. Check Connectivity","text":"<p>Make sure that you can reach Seahub from your browser.</p> <p>All the services should be healthy. You can check this by running <code>docker compose ps</code> in <code>/opt/seafile-compose</code>.</p>"},{"location":"docker/migrate-from-package-installation/#7-migrate-configuration-files","title":"7. Migrate Configuration Files","text":"<p>Our new deployment approach only supports configuration based on environment variables. The \"old\" configuration files still exist, but they are essentially immutable and overwritten every time the container starts.</p> <p>In order to migrate your existing configuration files, you should carefully examine the configuration files from your old installation and migrate all relevant settings to <code>/opt/seafile-compose/.env</code>. Please refer to the configuration docs for more information on how to do this.</p> <p>Do not forget to restart Seafile using <code>docker compose up -d</code> once you're done.</p>"},{"location":"docker/migrate-from-package-installation/#8-restore-files","title":"8. Restore Files","text":"<p>Use <code>cp</code> to copy your <code>storage</code> directory (previously at <code>/opt/seafile/seafile-data/storage/</code>) to <code>/opt/seafile-server/seafile/seafile-data/storage</code>:</p> <pre><code>cp -R /opt/seafile/seafile-data/storage /opt/seafile-server/seafile/seafile-data/\n</code></pre>"},{"location":"docker/migrate-from-package-installation/#9-restore-databases","title":"9. Restore Databases","text":"<p>Run the following commands to restore your databases:</p> <pre><code>cd /opt/seafile-compose\ndocker exec -i mariadb sh -c 'exec mariadb -uroot -p\"$MYSQL_ROOT_PASSWORD\" ccnet_db' &lt; ccnet-db.sql\ndocker exec -i mariadb sh -c 'exec mariadb -uroot -p\"$MYSQL_ROOT_PASSWORD\" seafile_db' &lt; seafile-db.sql\ndocker exec -i mariadb sh -c 'exec mariadb -uroot -p\"$MYSQL_ROOT_PASSWORD\" seahub_db' &lt; seahub-db.sql\n</code></pre> <p>Warning: This will drop all existing tables in the new installation!</p>"},{"location":"docker/migrate-from-package-installation/#10-restart-seafile","title":"10. Restart Seafile","text":"<p>Run the following commands to restart Seafile:</p> <pre><code>cd /opt/seafile-compose\ndocker compose down\ndocker compose up -d\n</code></pre>"},{"location":"docker/requirements/","title":"Requirements","text":"<p>One of the main advantages of Sefaile against other solutions is, that you can run Seafile on your own hardware or on any server your like. Still there are some requirements:</p> <ul> <li>Linux-Server with Root-Shell</li> <li>Public domain pointing to your server</li> <li>Open Ports for HTTP and HTTPS access (probably more ports for other components)</li> <li>The ports should not be already in use by another proxy such as NGINX or Apache</li> </ul> <p>Does this sounds complicated? Not really. So lets get started.</p> <p>Let's begin with the installation in the root-shell</p> <p>If you need more information, you can get more details in this article.</p>"},{"location":"docker/requirements/#platform-support","title":"Platform support","text":"<p>Seafile uses <code>docker</code> and <code>docker compose</code>. Therefore it should run as long as docker virtualisation is available. Still we recommend Debian 11 or newer because we always use Debian for production and testing.</p> <p>Currently only x86/x64 architecture is officially supported. Bigger customers might get support with ARM based systems.</p>"},{"location":"docker/requirements/#hardware","title":"Hardware","text":"<p>Seafile Server requires at least</p> <ul> <li>2 CPU cores</li> <li>4 GB RAM</li> <li>50 GB SSD</li> </ul> <p>These resources guarantee good performance for most applications with up to 100 users. More important than a lot of CPU or RAM is a fast storage for the database.</p> <p>Also be aware that typically you will require a lot of space to store all the files of your users. Next to local storage, seafile supports S3 and network file systems like nfs.</p> <p>As soon as you have more than 100 users, you should consider adding additional ressources or extending your Seafile Platform to use a cluster.</p> <p>Additional components need additional ressources</p> <p>These hardware requirements are for Seafile Server. If you install additional components like collabora online or onlyoffice the requirements for these ressources stack up and you have to add additional ressources.</p> <p>For sure we need a root shell on this server to execute the installation commands.</p>"},{"location":"docker/requirements/#public-available-domain","title":"Public available domain","text":"<p>This manual assumes that you have one domain or subdomain that points to your public IP address of your server.</p> <pre><code>flowchart LR\n    A[User /\\nBrowser]\n    B[Domain / Subdomain\\nPorts 80+443]\n    C[Server or VM\\nwith Docker]\n    A--&gt;B\n    B--&gt;C</code></pre> <p>For sure, it is possible to run Seafile without an internet connection (air-gapped) or with custom SSL certificates. This requires additional settings which are explained in separate chapters.</p>"},{"location":"docker/requirements/#ports","title":"Ports","text":"<p>SeaTable needs by default only the default ports 80 (HTTP) and 443 (HTTPS).</p> <ul> <li>80: HTTP access is necessary to receive a Let's Encrypt certificate</li> <li>443: HTTPS is the main entrance to SeaTable Server</li> </ul>"},{"location":"docker/requirements/#license","title":"License","text":"<p>Seafile Professional requires a license to start. Without a license you can only create up to three users. Licenses with more than three users can be obtained from datamate GmbH &amp; Co. KG. Just contact us and ask for a quote.</p> <p>Seafile Community does not require a license, but is not supported by this deployment.</p>"},{"location":"docker/single-node/","title":"Single-Node installation of a Seafile Server","text":"<p>Alright, let's dive in. This article will guide you through the process of installing a Seafile server with a Caddy web server. By the end of this article, your new Seafile server will be accessible via HTTPS with your custom domain. To begin, open a root shell on your server.</p> <p>Want to watch a step-by-step video instead of reading a manual?</p> <p>Watch a brief English video demonstrating all the essential steps:</p> <p> New Seafile Deployment with Environment Variables  10m</p> <p>Installation made easy</p> <p>Most commands that are required to install a Seafile Server are provided in a way, that you can just simply copy and paste the commands into your command line. Use the () icon at the top-right of the code boxes.</p>"},{"location":"docker/single-node/#install-basic-tools","title":"Install basic tools","text":"<p>The following command installs basic tools that are used in the following manual. Usually all these tools are already installed on your linux server.</p> <pre><code>apt update &amp;&amp; \\\napt -y install curl pwgen tree wget tar nano\n</code></pre>"},{"location":"docker/single-node/#install-docker-and-docker-compose-plugin","title":"Install Docker and Docker Compose Plugin","text":"<p>At get.docker.com, you'll find a script designed for the easy and convenient installation of the Docker Engine. While the script isn't recommended for production environments, it has shown no issues in our observations. You can effortlessly install Docker using this single command:</p> <pre><code>curl -fsSL get.docker.com | bash\n</code></pre> <p>Alternatively, you can opt to follow Docker's official installation instructions</p>"},{"location":"docker/single-node/#install-seafile-server","title":"Install Seafile Server","text":"<p>This installation assumes that all Seafile components are installed under <code>/opt</code>. We highly recommended to keep this folder structure. All articles in the manual assume Seafile's installation in this directory.</p>"},{"location":"docker/single-node/#1-create-basic-structure","title":"1. Create basic structure","text":"<p>Simply copy and paste the following command into your command line to execute. This code will download the latest yml files from repository  seafile-release.</p> <pre><code>mkdir /opt/seafile-compose &amp;&amp; \\\ncd /opt/seafile-compose &amp;&amp; \\\nwget -c https://github.com/datamate-rethink-it/seafile-release/releases/latest/download/seafile-compose.tar.gz \\\n-O - | tar -xz -C /opt/seafile-compose &amp;&amp; \\\ncp -n .env-release .env\n</code></pre> <p>To get an overview of the downloaded files, use the <code>tree</code> command.</p> <pre><code>tree -a /opt/seafile-compose\n</code></pre> <p>The expected output should appear as follows.</p> <pre><code># this should be the output of the tree command...\n/opt/seafile-compose\n\u251c\u2500\u2500 caddy.yml\n\u251c\u2500\u2500 collabora.yml\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 .env-release\n\u251c\u2500\u2500 .galera.yml\n\u251c\u2500\u2500 onlyoffice.yml\n\u251c\u2500\u2500 restic.yml\n\u251c\u2500\u2500 seafile-pe-cluster-backend.yml\n\u251c\u2500\u2500 seafile-pe-cluster-frontend.yml\n\u251c\u2500\u2500 seafile-pe.yml\n\u251c\u2500\u2500 seafile_storage_classes.json\n</code></pre>"},{"location":"docker/single-node/#2-create-a-directory-for-elasticsearch","title":"2. Create a directory for Elasticsearch","text":"<p>Elastisearch does not run as root user and therefore it is necessary to create the directory for the volume mount upfront. Otherwise elasticsearch has no permission to write into this directory.</p> <pre><code>mkdir -p /opt/seafile-elasticsearch/data &amp;&amp; \\\nchown -R 1000 /opt/seafile-elasticsearch\n</code></pre>"},{"location":"docker/single-node/#3-generate-some-secrets","title":"3. Generate some secrets","text":"<p>Seafile is configured with the hidden <code>.env</code> file (=enviroment configuration file) that is stored in the folder <code>/opt/seafile-compose</code>.</p> <p>We utilize <code>pwgen</code> to create secure passwords for your admin account, the database root password and other stuff. The following commands will generate such passwords and include them in the <code>.env'</code> file.</p> <pre><code>sed -i \"s/^SEAFILE_ADMIN_PASSWORD=.*/SEAFILE_ADMIN_PASSWORD=$(pwgen 40 1)/\" .env\nsed -i \"s/^SEAFILE_MYSQL_ROOT_PASSWORD=.*/SEAFILE_MYSQL_ROOT_PASSWORD=$(pwgen 40 1)/\" .env\nsed -i \"s/^SEAHUB__SECRET_KEY=.*/SEAHUB__SECRET_KEY=$(pwgen 40 1)/\" .env\nsed -i \"s/^SEAFILE__notification__jwt_private_key=.*/SEAFILE__notification__jwt_private_key=$(pwgen 40 1)/\" .env\n</code></pre> <p>Alternatively, you can manually add your own passwords.</p>"},{"location":"docker/single-node/#4-complete-settings-in-the-env-file","title":"4. Complete settings in the .env file","text":"<p>Open the <code>.env</code> file with the editor of your choice, like <code>nano</code> or <code>vim</code>.</p> <pre><code>nano /opt/seafile-compose/.env\n</code></pre> <p>Continue setting up your Seafile server by adjusting only three more variables. These are:</p> <ul> <li>TIME_ZONE</li> <li>SEAFILE_SERVER_HOSTNAME</li> <li>SEAFILE_ADMIN_EMAIL</li> </ul> <pre><code># components to be used\nCOMPOSE_FILE='caddy.yml,seafile-pe.yml' # (1)!\nCOMPOSE_PATH_SEPARATOR=','\n\n# system settings\nTIME_ZONE='Europe/Berlin' # (2)!\n\n# seafile server base url\nSEAFILE_SERVER_HOSTNAME='seafile.example.com' # (3)!\n\n# initial web admin\nSEAFILE_ADMIN_EMAIL='me@example.com'\nSEAFILE_ADMIN_PASSWORD='topsecret'\n\n# database\nSEAFILE_MYSQL_ROOT_PASSWORD=\n\n# seahub secret key\nSEAHUB__SECRET_KEY=\n\n# jwt private key for seafile notification server\nSEAFILE__notification__jwt_private_key=\n</code></pre> <ol> <li>COMPOSE_FILE is a comma separated list without spaces. This list defines which components should run on this server. Leave <code>caddy.yml</code> and <code>seatable-server.yml</code> at the beginning. You will add more components at a later time.</li> <li>Get a list of timezones from Wikipedia.</li> <li>Select your domain or subdomain that points to your Server (without https://). You have to set an A-Record or CNAME pointing to your IP.     If you don't have an URL and want to use an IP, then use the free service nip.io and add your-ip.nip.io (e.g. 5.35.28.112.nip.io).</li> </ol>"},{"location":"docker/single-node/#5-get-a-license","title":"5. Get a license","text":"<p>We assume that you have a license and that you save it to <code>/opt/seafile-compose/seafile-license.txt</code>.</p> <p>If you don't have a license, just create an empty license file to with the following command to use seafile with up to three users for free.</p> <pre><code>touch /opt/seafile-compose/seafile-license.txt\n</code></pre> <p>Do you need more users for your Seafile Enterprise?</p> <p>If you enjoy Seafile and are contemplating a larger license, please get in touch with us.</p>"},{"location":"docker/single-node/#6-fire-up-the-server","title":"6. Fire up the server","text":"<p>Now it is time to run the following command to download and initiate the docker images for the initial setup. This process will require some time.</p> <pre><code>docker compose up -d\n</code></pre> <p>If the process completed successfully, you can now open your web browser and access Seafile using the URL you specified in your <code>.env</code> file. Sign in using the credentials you provided in the same file.</p> <p> Congratulations! You've completed the basic setup of your Seafile Server.</p>"},{"location":"docker/single-node/#next-steps-use-it-or-configure-it","title":"Next steps: use it or configure it","text":"<p>Now it's your turn! You can dive right into Seafile: upload files, add users, utilize the API, and explore all its features.</p> <p>Or, if you prefer, you can start by configuring your Seafile Server. In the next section, we'll guide you through configuring your Seafile Server using the .env file.</p>"},{"location":"docker/upgrade/","title":"Upgrade your Docker Deployment","text":"<p>Updating/Upgrade (we don't differenciate) a Seafile Server should take just a few seconds. Simply pull the latest Docker images, restart the containers, and let the system automatically handle necessary database updates. Within moments, all essential services of the Seafile Server will be accessible.</p>"},{"location":"docker/upgrade/#how-to-update-seafile-server","title":"How to update Seafile Server","text":"<p>All that is necessary is just ran this command to update Seafile and all additional components.</p> <pre><code>cd /opt/seafile-compose &amp;&amp; \\\nwget -c https://github.com/datamate-rethink-it/seafile-release/releases/latest/download/seafile-compose.tar.gz \\\n-O - | tar -xz -C /opt/seafile-compose &amp;&amp; \\\ndocker compose pull\ndocker compose down\ndocker compose up -d\n</code></pre> <p>All your configurations that you have done so far in your .env will be taken to create your configuration files correctly.</p> <p>The default yml files will be overwritten! Use custom files instead.</p> <p>This command replaces all predefined yml files in your <code>/opt/seafile-compose</code> folder. It will not touch your <code>.env</code> file and your custom yml files. If you made some changes to the predefined yml files, make sure to save these changes and follow the recommendations to create custom copies in the future.</p> <p>After some seconds your Seafile Server should be reachable again. You can check the current version of your Seafile Server opening the URL <code>https://&lt;your-seafile-domain&gt;/api2/server-info</code>.</p>"},{"location":"docker/extensions/clamav/","title":"Antivirus Scan with ClamAV","text":"<p>Seafile can scan uploaded files for malicious content in the background. When configured to run periodically, the scan process scans all existing libraries on the server. In each scan, the process only scans newly uploaded/updated files since the last scan. For each file, the process executes a user-specified virus scan command to check whether the file is a virus or not. Most anti-virus programs provide command line utility for Linux. The following instructions explain the configuration with the open source antivirus software ClamAV.</p> <p>In addition to the background checks, Seafile offers the possibility to deny file upload via upload link or even the webinterface if a virus is found.</p>"},{"location":"docker/extensions/clamav/#configuration-of-background-scans","title":"Configuration of background scans","text":""},{"location":"docker/extensions/clamav/#change-the-env-file","title":"Change the .env file","text":"<p>To install the antivirus scan solution ClamAV, include <code>clamav.yml</code> in the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,clamav.yml'/\" /opt/seafile-compose/.env\n</code></pre>"},{"location":"docker/extensions/clamav/#set-the-required-environment-variables","title":"Set the required environment variables","text":"<p>To activate the scans, just add these variables to your .env file:</p> <pre><code>SEAFILE__virus_scan__scan_command='clamdscan'\nSEAFILE__virus_scan__virus_mode='1'\nSEAFILE__virus_scan__nonvirus_mode='0'\nSEAFILE__virus_scan__scan_interval='5'\nSEAFILE__virus_scan__scan_size_limit='20'\nSEAFILE__virus_scan__threads='2'\n</code></pre> <p>Afterwards restart your seafile container with these commands:</p> <pre><code>cd /opt/seafile-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre>"},{"location":"docker/extensions/clamav/#antivirus-scan-for-upload-links","title":"Antivirus Scan for Upload Links","text":"<p>You may also configure Seafile to scan files for virus upon the files are uploaded. This only works for files uploaded via web interface or web APIs. Files uploaded with syncing or SeaDrive clients cannot be scanned on upload due to performance consideration.</p> <pre><code>SEAHUB__ENABLE_UPLOAD_LINK_VIRUS_CHECK='True'\n</code></pre>"},{"location":"docker/extensions/clamav/#antivirus-scan-for-web-uploads","title":"Antivirus Scan for Web Uploads","text":"<p>Since Pro Edition 11.0.7, you may scan all uploaded files via web APIs by adding the option to your .env file:</p> <pre><code>SEAFILE__fileserver__check_virus_on_web_upload='true'\n</code></pre>"},{"location":"docker/extensions/collabora/","title":"Collabora Online","text":"<p>Collabora Online offers real-time collaboration with office documents in your browser. As soon as you open a file from Seafile, Collabora opens in a new browser tab and allows real time collaboration. As soon as the last user exits the document by closing his browser window, the document is saved back to the Seafile storage.</p> <p>This article is about the how to install the CODE version of collabora online.</p> <p>You have to decide: Collabora OR OnlyOffice</p> <p>Collabora and OnlyOffice are both office editors. You have to decide which one you would like to use. You can not use both in parallel.</p> <p>Use a separate host, if you expect many users</p> <p>Collabora Online (CODE) can be installed on the same host as Seafile Professional Edition. If Collabora Online is used regularly and by many users, the host should be fitted with sufficient cores and RAM or you should install Collabora on a separate host.</p> <p>This manual assumes that Seafile Professional Edition is installed and is running.</p>"},{"location":"docker/extensions/collabora/#installation","title":"Installation","text":""},{"location":"docker/extensions/collabora/#activate-collabora","title":"Activate collabora","text":"<p>To install OnlyOffice, include <code>collabora.yml</code> in the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images for OnlyOffice.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,collabora.yml'/\" /opt/seafile-compose/.env\n</code></pre>"},{"location":"docker/extensions/collabora/#set-required-environment-variables","title":"Set required environment variables","text":"<p>Now execute the following command to add the required configuration to your .env file. You don't have to replace <code>${SEAFILE_SERVER_HOSTNAME}</code>. It will replaced automatically.</p> <pre><code>cd /opt/seafile-compose\nsource .env\necho -e \"\\n# collabora online\" &gt;&gt; .env\necho \"SEAHUB__OFFICE_SERVER_TYPE='CollaboraOffice'\" &gt;&gt; .env\necho \"SEAHUB__ENABLE_OFFICE_WEB_APP=True\" &gt;&gt; .env\necho \"SEAHUB__OFFICE_WEB_APP_BASE_URL='https://${SEAFILE_SERVER_HOSTNAME}:6232/hosting/discovery'\" &gt;&gt; .env\necho \"SEAHUB__OFFICE_WEB_APP_FILE_EXTENSION='odp,ods,odt,odg,xls,xlsb,xlsm,xlsx,ppsx,ppt,pptm,pptx,doc,docm,docx'\" &gt;&gt; .env\necho \"SEAHUB__ENABLE_OFFICE_WEB_APP_EDIT=true\" &gt;&gt; .env\necho \"SEAHUB__OFFICE_WEB_APP_EDIT_FILE_EXTENSION='odp,ods,odt,odg,xls,xlsb,xlsm,xlsx,ppsx,ppt,pptm,pptx,doc,docm,docx'\" &gt;&gt; .env\n</code></pre>"},{"location":"docker/extensions/collabora/#download-collabora-and-restart","title":"Download collabora and restart","text":"<p>One more step is necessary to download the Collabora container and restart the Seafile container.</p> <pre><code>cd /opt/seafile-compose\ndocker compose down\ndocker compose up -d\n</code></pre>"},{"location":"docker/extensions/collabora/#check-if-installation-is-complete","title":"Check if installation is complete","text":"<p>Wait for some seconds and then open <code>https://&lt;your-seafile-url&gt;:6232</code> and you should see simple an OK. This confirms that Collabora Online is up and running. Office documents that you double click in your base should be opened with Collabora Online in a new browser tab.</p>"},{"location":"docker/extensions/collabora/#advanced-custom-settings","title":"Advanced: Custom settings","text":""},{"location":"docker/extensions/collabora/#admin-interface","title":"Admin interface","text":"<p>Collabora Online provides an admin interface, which is disabled by default. Add the following parameters to your <code>.env</code> file to activate it and adapt it to your needs.</p> <pre><code>COLLABORA_ADMIN=username\nCOLLABORA_PW=password\nCOLLABORA_ENABLE_ADMIN_CONSOLE=true\n</code></pre> <p>After restarting the Collabora container you can access the admin interface at <code>https://&lt;your-seafile-url&gt;:6232/browser/dist/admin/admin.html</code>.</p>"},{"location":"docker/extensions/collabora/#activate-file-logging","title":"Activate File Logging","text":"<p>To activate File logging of Collabora Online you have to add the following parameter to your <code>.env</code> file:</p> <pre><code>COLLABORA_ENABLE_FILE_LOGGING=true\n</code></pre> <p>After a restart of the container the logs are written to <code>/opt/cool/logs/coolwsd.log</code>. To access this log file at the host system you have to create a folder and change the permission to 777.</p> <pre><code>mkdir /opt/collabora\nchmod 777 /opt/collabora\n</code></pre> <p>Now make a copy of the collabora.yml and uncomment the volumes definition in your <code>custom-collabora.yml</code>.</p>"},{"location":"docker/extensions/onlyoffice/","title":"Deploy ONLYOFFICE Documentserver","text":"<p>OnlyOffice offers real-time collaboration with office documents in your browser. As soon as you open a file from Seafile, OnlyOffice opens in a new browser tab and allows real time collaboration. As soon as the last user exits the document by closing his browser window, the document is saved back to the Seafile storage.</p> <p>Access takes place via the public URL via HTTPS. So that OnlyOffice cannot be used by other systems, a shared secret in the form of a JWT key is used.</p> <p>You have to decide: Collabora OR OnlyOffice</p> <p>Collabora and OnlyOffice are both office editors. You have to decide which one you would like to use. You can not use both in parallel.</p> <p>Use a separate host, if you expect many users</p> <p>OnlyOffice can be installed on the same host as Seafile Professional Edition. If OnlyOffice is used regularly and by many users, the host should be fitted with sufficient cores and RAM or you should move OnlyOffice to a separate host.</p> <p>This article assumes that Seafile Professional Edition is installed and is running.</p>"},{"location":"docker/extensions/onlyoffice/#installation","title":"Installation","text":""},{"location":"docker/extensions/onlyoffice/#activate-onlyoffice","title":"Activate Onlyoffice","text":"<p>To install OnlyOffice, include <code>onlyoffice.yml</code> in the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images for OnlyOffice.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,onlyoffice.yml'/\" /opt/seafile-compose/.env\n</code></pre>"},{"location":"docker/extensions/onlyoffice/#generate-jwt-token-and-set-required-environment-variables","title":"Generate JWT-Token and set required environment variables.","text":"<p>Secure communication between Seafile and OnlyOffice is granted by a shared secret. The following command will generate such a shared secret and write all necessary environment variables to your <code>.env</code> file:</p> <pre><code>cd /opt/seafile-compose\nsource .env\necho -e \"\\n# OnlyOffice\" &gt;&gt; .env\necho \"ONLYOFFICE_JWT_SECRET='$(pwgen -s 40 1)'\" &gt;&gt; .env\necho \"SEAHUB__ENABLE_ONLYOFFICE=True\" &gt;&gt; .env\necho \"SEAHUB__ONLYOFFICE_APIJS_URL='https://${SEAFILE_SERVER_HOSTNAME}:6233/web-apps/apps/api/documents/api.js'\" &gt;&gt; .env\necho \"SEAHUB__ONLYOFFICE_FILE_EXTENSION='doc,docx,ppt,pptx,xls,xlsx,odt,fodt,odp,fodp,ods,fods'\" &gt;&gt; .env\necho \"SEAHUB__ONLYOFFICE_EDIT_FILE_EXTENSION='docx,pptx,xlsx'\" &gt;&gt; .env\necho \"SEAHUB__ONLYOFFICE_FORCE_SAVE=True\" &gt;&gt; .env\necho 'SEAHUB__ONLYOFFICE_JWT_SECRET=${ONLYOFFICE_JWT_SECRET}' &gt;&gt; .env\n</code></pre>"},{"location":"docker/extensions/onlyoffice/#download-onlyoffice-and-restart","title":"Download onlyoffice and restart","text":"<p>One more step is necessary to download the OnlyOffice container and restart the Seafile service.</p> <pre><code>cd /opt/seafile-compose\ndocker compose down\ndocker compose up -d\n</code></pre> <p>OnlyOffice takes some some minutes for the initial start. If you get an error message when clicking an office file in Seafile, be patient and try again after one minute. Onlyoffice is ready, if a new browser window opens with your office document. Any user with access to this base can now open this document with OnlyOffice.</p>"},{"location":"docker/extensions/onlyoffice/#check-if-installation-is-complete","title":"Check if installation is complete","text":"<p>Try to open <code>https://&lt;your-seafile-url&gt;:6233/welcome</code>. You should see a welcome page like this.</p> <p></p> <p>If this does not happen, execute <code>docker compose logs onlyoffice -f</code> to get more details about the startup of OnlyOffice.</p>"},{"location":"docker/extensions/restic/","title":"Restic Backup","text":"<p>Running your own server always requires a reliable backup to secure your data. With this backup container, obtaining a daily backup is easy. We chose the backup software Restic for its numerous advantages:</p> <ul> <li>Target: Restic supports multiple backup targets, including S3, Backblaze, BorgBase, Dropbox, and Google Drive.</li> <li>Speed: Backup your data at lightning speed.</li> <li>Encryption: Your data is securely encrypted. Without the encryption key, it remains inaccessible.</li> <li>Deduplication: Duplicate files or file fragments are saved only once, reducing the amount of data transmitted.</li> <li>Snapshots: Forget about regular full backups; only the changes since the last backup need to be saved.</li> <li>Reliability: With 24k stars on GitHub and nearly a decade of development, restic is exceptionally robust.</li> </ul> <p></p>"},{"location":"docker/extensions/restic/#installation","title":"Installation","text":"<p>This article explains how to implement a restic backup for your Seafile server.</p>"},{"location":"docker/extensions/restic/#change-the-env-file","title":"Change the .env file","text":"<p>To install the restic backup container, include <code>restic.yml</code> in the <code>COMPOSE_FILE</code> variable within your <code>.env</code> file. This instructs Docker to download the required images.</p> <p>Simply copy and paste () the following code into your command line:</p> <pre><code>sed -i \"s/COMPOSE_FILE='\\(.*\\)'/COMPOSE_FILE='\\1,restic.yml'/\" /opt/seafile-compose/.env\n</code></pre>"},{"location":"docker/extensions/restic/#configure-your-backup","title":"Configure your backup","text":"<p>Every backup is encrypted with a password. Please make sure that you store this password at a save place, otherwise your backup will be worthless if you might need it.</p> <pre><code>pw=$(pwgen -s 40 1) &amp;&amp; echo \"Generated restic password: ${pw}\"\n</code></pre> <p>The generated restic password needs to be added to your <code>.env</code> file. Copy and paste the following command:</p> <pre><code>echo -e \"\\n# restic-backup\" &gt;&gt; /opt/seafile-compose/.env\necho \"RESTIC_PASSWORD=${pw}\" &gt;&gt; /opt/seafile-compose/.env\n</code></pre> <p>Local Backups are better then no backups</p> <p>This configuration will create daily snapshots including database dumps at your host system at <code>/opt/restic/local</code>. This is a good start, but of cause we recommend that you store your backup remotely.</p> Secure offsite backup with BorgBase <p>For small Seafile servers, we could recommend the service BorgBase. They offer up to 10GB of Backup storage for free and the setup can be done in one minute.</p> <ol> <li>Register at https://borgbase.com.</li> <li>Create a new repo, choose any name and set the Repo Format: Restic.</li> <li>Save the provided repository url and use it as <code>RESTIC_REPOSITORY</code>.</li> </ol> <p>This is all that is necessary to create a secure offsite backup.</p>"},{"location":"docker/extensions/restic/#other-backup-targets","title":"Other backup targets","text":"<p>To use another backup target then the local path <code>/opt/restic/local</code> you have to provide the additional environment variable <code>RESTIC_REPOSITORY</code>. Some backends require additional environment variables for authentication.</p> <p>Here are some examples. For more details, refer to the official restic documentation.</p> REST ServerAmazon S3Backblaze B2rclone <pre><code>RESTIC_REPOSITORY='rest:https://user:pass@host/'\n</code></pre> <pre><code>RESTIC_REPOSITORY='s3:s3.amazonaws.com/bucket_name'\nAWS_ACCESS_KEY_ID='...'\nAWS_SECRET_ACCESS_KEY='...'\n</code></pre> <pre><code>RESTIC_REPOSITORY='s3:s3.amazonaws.com/bucket_name'\nB2_ACCOUNT_ID='...'\nB2_ACCOUNT_KEY='...'\n</code></pre> <p>rclone is already installed in the backup container and expects the configuration file at <code>/root/.config/rclone/rclone.conf</code>. Generate your rclone.conf at the host and mount it to the container at this location. Then you can use restic with rclone as described in the manual.</p> <pre><code>volumes:\n    ...\n    - /opt/restic/rclone.conf:/root/.config/rclone/rclone.conf:ro\n</code></pre> <pre><code>RESTIC_REPOSITORY='rclone:xxx:yyy'\n</code></pre>"},{"location":"docker/extensions/restic/#start-the-backup","title":"Start the backup","text":"<p>Now it is time to load the container and start the backup for the first time.</p> <pre><code>cd /opt/seafile-compose &amp;&amp; \\\ndocker compose up -d\n</code></pre> <p>Afterwards check the logs for more details.</p> <pre><code>docker logs restic-backup\n</code></pre> <p>The output might look like this:</p> <pre><code>[2024-05-17 16:16] Starting the restic backup container ...\n[2024-05-17 16:16] Restic repository '/local' does not exists.\n  Running restic init.\n  created restic repository 7982e3a700 at /local\n\nPlease note that knowledge of your password is required to access the repository\nLosing your password means that your data is irrecoverably lost.\n[2024-05-17 16:16] Setup backup cron job with cron expr. BACKUP_CRON: 20 2 * * *\n[2024-05-17 16:16] Setup check cron job with cron expr. CHECK_CRON: 40 3 * * 6\n[2024-05-17 16:16] Container started successful.\n  The restic repository is initialized, cron daemon runs...\n  Ready for backup!\n</code></pre> <p> Perfect! Your backup was initialized and will run every day at 2.20am.</p> <p>More information about the usage of the restic backup container can be found at the github repository  restic-backup-docker.</p>"},{"location":"introduction/get-started/","title":"How to get started","text":"<p>Now it is time to start with the installation. Installing Seafile is straightforward, with two deployment options available:</p>"},{"location":"introduction/get-started/#docker-deployment","title":"Docker Deployment","text":"<p>This is the default and recommended method, ideal for most users. Docker simplifies the setup process, making it quick and easy to get Seafile up and running.</p> <p>Start the docker deployment</p>"},{"location":"introduction/get-started/#kubernetes-deployment","title":"Kubernetes Deployment:","text":"<p>This option is suitable if you already have a Kubernetes cluster, are familiar with Kubernetes, and wish to deploy Seafile as part of a clustered environment. Kubernetes should only be considered if these conditions apply.</p> <p>Read more about Kubernetes</p>"},{"location":"introduction/key-features-seafile/","title":"Short introduction to Seafile","text":"<p>Seafile is an open-source file synchronization and sharing platform, similar to services like Dropbox or Google Drive, but with a focus on security, scalability, and privacy. It allows individuals and organizations to create their own private cloud storage solution, where users can sync files across multiple devices, share files and folders, and collaborate on documents in real-time.</p>"},{"location":"introduction/key-features-seafile/#key-features-of-seafile","title":"Key Features of Seafile","text":"<ul> <li>File Synchronization: Seafile enables files to be synced across different devices automatically, ensuring that users always have access to the latest versions of their documents.</li> <li>File Sharing: Users can share files and folders with others, both within and outside of their organization, with various levels of access control.</li> <li>High Performance: Seafile is designed for speed and efficiency, offering lightning-fast file syncing and sharing. It operates with minimal resource consumption on the server, making it an ideal choice for environments where performance and resource optimization are crucial.</li> <li>Reliability: Seafile ensures data integrity and protection against corruption through robust mechanisms and consistent performance. Its stable architecture requires minimal maintenance, providing a dependable solution that works seamlessly in the background without constant oversight.</li> <li>Security: Seafile offers robust security features, including client-side encryption, ensuring that files are encrypted before they are uploaded to the server. This makes it a good choice for organizations with high privacy requirements.</li> <li>Scalability: Seafile is designed to be scalable, allowing it to support a large number of users and files, making it suitable for both small teams and large enterprises.</li> <li>Cross-Platform Support: It supports multiple platforms, including Windows, macOS, Linux, iOS, and Android, providing flexibility for users across different devices.</li> </ul> <p>Seafile is available in both a Community Edition, which is free and open-source, and a Professional Edition, which includes additional features and is designed for enterprise use, with paid support options.</p>"},{"location":"k8s/concept/","title":"Core Concept of the Seafile Deployment with Kubernetes","text":"<p>Kubernetes is a powerful solution for deploying scalable and redundant applications, making it an ideal platform for running various software services. One such service is Seafile, a file storage and collaboration platform that benefits greatly from Kubernetes' capabilities.</p>"},{"location":"k8s/concept/#deploying-seafile-cluster-on-kubernetes","title":"Deploying Seafile Cluster on Kubernetes","text":"<p>The Seafile Cluster can be effortlessly deployed on an existing Kubernetes cluster. Kubernetes' orchestration abilities ensure that Seafile remains highly available and performs efficiently, even under heavy load.</p>"},{"location":"k8s/concept/#using-helm-charts-for-simple-installation","title":"Using Helm Charts for Simple Installation","text":"<p>Installation is simplified with a ready-to-use Helm chart available on Artifact Hub. This Helm chart automates the deployment process, reducing the complexity typically associated with setting up Seafile in a Kubernetes environment.</p>"},{"location":"k8s/concept/#cluster-configuration-and-architecture","title":"Cluster Configuration and Architecture","text":"<p>The deployment of Seafile on Kubernetes typically involves a cluster setup with one backend server and multiple frontend nodes. This architecture ensures that the application is both robust and scalable, with frontend nodes handling user requests and the backend server managing data storage and processing.</p>"},{"location":"k8s/concept/#optional-components-for-enhanced-functionality","title":"Optional Components for Enhanced Functionality","text":"<p>For enhanced functionality and performance, optional components such as Elasticsearch, Memcached, MariaDB, and Minio can be installed as part of the Seafile deployment. These components improve search capabilities, caching, database management, and object storage, respectively.</p>"},{"location":"k8s/concept/#ease-of-configuration-with-helm-and-environment-variables","title":"Ease of Configuration with Helm and Environment Variables","text":"<p>The complete configuration of the Seafile cluster setup can be easily managed using Helm and environment variables. This approach allows for flexible and customizable deployment options, ensuring that the Seafile instance meets specific requirements and scales as needed.</p>"},{"location":"k8s/helm/","title":"Deployment with helm","text":"<p>There is a ready-to use helm chart for easy deployment of a Seafile Cluster.</p> <p>You can find the official installation instructions on artifacthub.io:</p> <p>Seafile Chart on ArtifactHub</p>"},{"location":"k8s/how-to-configure-kubernetes/","title":"How to configure","text":"<p>You can overwrite the default values by providing a custom value.yaml. More info will follow soon.</p>"},{"location":"k8s/upgrade/","title":"How to upgrade your Seafile Kubernetes Cluster","text":"<p>Simply run a <code>helm upgrade seafile datamate/seafile</code>.</p> <p>More details will follow.</p>"}]}